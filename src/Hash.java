
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

/*this class is to represent, and provide methods for, the Hash objects in our MP7 */
public class Hash {
    // int currNode;
    // String data;
    // byte[] prevHash;
    byte[] hashedData;
    // int nonce;

     /* constructor 
      * pre: data must already be hashed before constructing!
     */
    public Hash(byte[] hashedData) {
        this.hashedData = hashedData;
    }
    /*
     * calculateHash returns a byte array that represents the hash generated by
     * putting the input msg into the "sha-265" algorithm
     * 
     * @pre: msg is a valid string
     * 
     * @post: a vaid byte array is returned, or an error is returned
     */
    public static byte[] calculateHash(byte[] unhashedData) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("sha-256");
        md.update(unhashedData);
        byte[] hash = md.digest();
        return hash;
    }

    /*
     * Returns true if this hash meets the criteria for validity, i.e., its
     * first three indices contain zeroes.
     * 
     * @pre: hashed data exists and is big enough
     * 
     * @post: a boolean is returned that derrmines validity, true or false
     */
    public boolean isValid() {
        if(hashedData == null || hashedData.length < 3){
            return false;
        }
        return (this.hashedData[0] == 0 && this.hashedData[1] == 0 && this.hashedData[2] == 0);
    }

    byte[] getData() {
        return this.hashedData;
    }

    int getSize() {
        return Byte.BYTES * this.getData().length;
    }

    /*
     * equals compares the hash object to another object to
     * determine whetehr the other object is a hash object, and, if so,
     * that hash matches with the current hash object
     * 
     * @pre: none
     * 
     * @post: a true/false boolean is returned
     */
    public boolean equals(Object o) {
        if (o instanceof Hash) {
            Hash input = (Hash) o;
            return Arrays.equals(input.hashedData, this.hashedData);
        }
        return false; // if o is not a hash object who's hash byte array is identical to the current
                      // objects, return false
    }

    /*
     * toString converts the hash of the object to a string made up of hexadecimal
     * representation of the values in the hash. it also prints it out.
     * 
     * @pre: none
     * 
     * @post: a string is returned that represents the hash code in hexadecimal
     */
    public String toString() {
        String s = "";
        for (int i = 0; i < this.hashedData.length; i++) {
            Byte curr = this.hashedData[i];// getting the byte at the current index
            String added = "";
            added = String.format("%x", Byte.toUnsignedInt(curr));
            s = s + added;// converting the byte to a unsigned int, and adding it to
                          // the end of s;
        }
        return s;
    }

}
